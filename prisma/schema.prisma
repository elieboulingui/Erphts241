// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Configuration de base
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 2. Enums
enum AccessType {
  READ
  WRITE
  ADMIN
}

enum Role {
  ADMIN
  MEMBRE
}

// 3. Modèles

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  role            Role             @default(MEMBRE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  password        String? 
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]
  organisations   Organisation[]   @relation("OrganisationMembers")
  ownedOrgs       Organisation[]   @relation("OrganisationOwner")
  invitationsSent Invitation[]     @relation("InvitationInviter")
  passwordTokens  PasswordResetToken[]

  activityCreated ActivityLog[]    @relation("CreatedByUser")
  activityUpdated ActivityLog[]    @relation("UpdatedByUser")
  activityRelated ActivityLog[]    @relation("RelatedUser")

  ActivityLog ActivityLog[] @relation(map: "ActivityLog_userId_fkey")

  VerificationToken VerificationToken[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier  String
  token       String
  expires     DateTime
  isArchived  Boolean?   @default(false)
  archivedAt  DateTime?

  // Relation avec l'utilisateur
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])

  @@id([identifier, token], name: "identifier_token")
}


model Authenticator {
  credentialID         String   @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organisation {
  id           String        @id @default(cuid())
  name         String        @unique
  slug         String        @unique
  logo         String?
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isArchived   Boolean       @default(false)
  archivedAt   DateTime?

  // Relations
  owner        User          @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members      User[]        @relation("OrganisationMembers")
  invitations  Invitation[]
  activityLogs ActivityLog[] @relation("organisation")
}

model Invitation {
  id             String        @id @default(cuid())
  email          String
  organisationId String
  role           Role
  accessType     AccessType
  invitedById    String
  token          String        @unique
  tokenExpiresAt DateTime
  invitedAt      DateTime      @default(now())
  acceptedAt     DateTime?
  isArchived     Boolean       @default(false)
  archivedAt     DateTime?
  archivedBy     String?

  // Relations
  organisation   Organisation  @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedBy      User          @relation("InvitationInviter", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, organisationId])
}

model PasswordResetToken {
  id         String    @id @default(cuid())
  userId     String
  token      String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 10. Modèle de journal d'activité
model ActivityLog {
  id             String       @id @default(cuid())
  action         String
  entityType     String
  entityId       String
  oldData        Json?
  newData        Json?
  
  // User qui a effectué l'action
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull, map: "ActivityLog_userId_fkey")
  
  // Contexte d'organisation
  organisationId String?
  organisation   Organisation? @relation("organisation", fields: [organisationId], references: [id], onDelete: Cascade)
  
  // Référence du créateur
  createdByUserId String?
  createdBy      User?        @relation("CreatedByUser", fields: [createdByUserId], references: [id], map: "ActivityLog_createdBy_fkey")
  
  // Référence de mise à jour
  updatedByUserId String?
  updatedBy      User?        @relation("UpdatedByUser", fields: [updatedByUserId], references: [id], map: "ActivityLog_updatedBy_fkey")
  
  // Utilisateur concerné (si l'action affecte un autre utilisateur)
  relatedUserId  String?
  relatedUser    User?        @relation("RelatedUser", fields: [relatedUserId], references: [id], onDelete: SetNull, map: "ActivityLog_relatedUser_fkey")

  createdAt      DateTime     @default(now())
  ipAddress      String?
  userAgent      String?
  actionDetails  String?
  entityName     String?

  @@index([userId])
  @@index([entityType, entityId])
  @@index([organisationId])
  @@index([createdAt])
  @@index([action])
  @@index([relatedUserId])
}
